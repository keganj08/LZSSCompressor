AUTHOR: Kegan Johnson

THE PROJECT: This is an implementation and demo of the Lempel-Ziv-Storer-Szymanski compression algorithm.

GOAL: Take text input, reduce its storage size by reducing redundancies, display the compressed version, and 
    provide an interface for LZSS-encoded text to be decoded back into its uncompressed form.

ENCODING ALGORTIHM:
    - Take an input string "In"
    - Keep a memory buffer "Buffer" of what characters have been read 
    - Keep a string "Curr" of the current character or characters being checked
    - Keep an output string "Out"
    - Iterate over each character in In
        - Set Curr to next character
        - If Curr does not appear in Buffer:
            - Add Curr to Out
            - Add Curr to Buffer
            - Clear Curr
            - Continue to next character
        - If Curr appears in Buffer:
            - While Curr appears in Buffer:
                - Add following character from In to Curr
            - Remove the last character from Curr, so that Curr contains only the repeated sequence
            - Create a string "Token" of the form "<x,y>" where x is the number of characters to go backwards in Buffer to reach
                the beginning of the repeated sequence, and y is the length of the sequence
            - If Token is shorter than Curr:
                - Add Token to Out
                - Add Curr to Buffer
                - Clear Curr
                - Continue to next character
            - If token is not shorter than Curr:
                - Add Curr to Out
                - Add Curr to Buffer
                - Clear Curr
                - Continue to next character